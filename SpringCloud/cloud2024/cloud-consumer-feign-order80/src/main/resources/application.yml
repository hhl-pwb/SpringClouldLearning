server:
  port: 80

spring:
  application:
    name: cloud-consumer-openfeign-order
  ####Spring Cloud Consul for Service Discovery
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true #优先使用服务ip进行注册
        service-name: ${spring.application.name}
    openfeign:
      client:
        config:
          # default设置全局超时时间，指定服务名称可以设置单个服务的超时时间
          #          default:
          #链接超时时间 3秒
          #            connect-timeout: 3000
          #读取超时时间 3秒
          #            read-timeout: 3000
          # serviceC服务名称，例如cloud-payment-service
          # 二者可以共存，但是此时就是 配置单个微服务的生效
          cloud-payment-service:
            #链接超时时间 4秒
            #读取超时时间，为避免演示出错，讲解完本次内容后设置为20秒
            connect-timeout: 20000
            #读取超时时间 4秒
            #读取超时时间，为避免演示出错，讲解完本次内容后设置为20秒
            read-timeout: 20000
      httpclient:
        hc5:
          enabled: true
      compression:
        request:
          enabled: true
          min-request-size: 2048 #最小触发压缩的大小
          mime-types: text/xml,application/xml,application/json #触发压缩数据类型
        response:
          enabled: true
      #开启circuitbreaker和分组激活搜spring.cloud.openfeign.circuitebreaker.enable
      circuitbreaker:
        enabled: true
        group:
          enabled: true #没开分组永远不用分组的配置，精确优先，分钟次之(开了分组)、默认最后

# feign日志以什么级别监控哪个接口
logging:
  level:
    com:
      atguigu:
        cloud:
          apis:
            PayFeignApi: debug

# Resilence4j CircuitBreaker 按照次数：count_base的例子
# 6次访问中，当执行方法的失败率达到50%是circutibreaker将进入开启OPEN状态（保险丝跳闸断电）拒绝所有的请求。
# 等待5秒后，circutiBreaker将自动开启OPEN状态过渡到HALF_OPEN状态，允许一些请求通过以测试服务是否回复正常。
# 如果还是异常，CircuitBreaker 将重新进入开启OPEN状态，如果正常进入关闭CLOSE闭合状态恢复正常处理请求。
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 #设置50%的调用失败时打开断路器，超过失败请求的百分比,Circuitbreaker变为OPEN状态
#        sliding-window-type: count_based #滑动窗口的类型
#        sliding-window-size: 6 #滑动窗口的大小配置COUNT_BASE表示6个请求，配置TIME_BASE表示为6秒
#        minimum-number-of-calls: 6 #断路器极端失败率或慢调用率之前所需的最小样本（每个滑动窗口周期）。如果minimum-number-of-calls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
#        automatic-transition-from-open-to-half-open-enabled: true #是否启用从自动从开启状态过渡多搬开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常。
#        wait-duration-in-open-state: 5s #从OPEN到HANL_OPEN状态需要等待的时间
#        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许的最大请求书，默认为10，在半开状态下，circuitbreaker将允许最多permitted-number-of-calls-in-half-open-state个请求通过，如果其中有任何一个请求失败，CirCuitBreaker将重新进入开启OPEN状态
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        base-config: default


# Resilience4j CircuitBreaker 按照时间：TIME_BASED 的例子
resilience4j:
  timelimiter:
    configs:
      default:
        timeout-duration: 10s #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
        slowCallRateThreshold: 30 #慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
        slidingWindowType: TIME_BASED # 滑动窗口的类型
        slidingWindowSize: 2 #滑动窗口的大小配置，配置TIME_BASED表示2秒
        minimumNumberOfCalls: 2 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。
        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
        recordExceptions:
          - java.lang.Exception
    instances:
      cloud-payment-service:
        baseConfig: default